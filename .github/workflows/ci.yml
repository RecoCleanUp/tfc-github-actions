# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - "**/README.md"
      - "**/LICENSE"
      - "**/.gitignore"

permissions:
  id-token: write
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    outputs:
      artifacts: ${{ needs.build.outputs.artifacts }}

    steps:
      - uses: goto-bus-stop/setup-zig@v2

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install Cargo Lambda
        run: cargo install cargo-lambda
        working-directory: lambda-api

      - name: Cache Cargo Dependencies
        uses: actions/cache@v2
        with:
          path: |
            lambda-api/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('lambda-api/Cargo.lock') }}

      - name: Build Lambda Project
        run: cargo lambda build --release --output-format zip
        working-directory: lambda-api

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lambda-zip
          path: lambda-api/target/lambda/lambda-api/bootstrap.zip

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: lambda-zip

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: terraform

        # On push to "master", deploy the Terraform infrastructure
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: terraform
